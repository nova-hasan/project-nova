// Note JS //

function submit() {
    alert("Berhasil input judul buku");
}
    var r = document.getElementById("bookSubmit");
    r.onclick = submit;

// Error Message main.js:207//
Uncaught SyntaxError SyntaxError: Illegal return statement
    at (program) (d:\Dicoding 3\Project F-E Dicoding\main.js:207:1)
arg0: SyntaxError: Illegal return statement {stack: 'SyntaxError: Illegal return statement', message: 'Illegal return statement'}
message: 'Illegal return statement'
stack: 'SyntaxError: Illegal return statement'
[[Prototype]]: Error
constructor: ƒ SyntaxError()
arguments: ƒ ()
caller: ƒ ()
length: 1
name: 'SyntaxError'
prototype: Error {name: 'SyntaxError', message: ''}
[[Prototype]]: ƒ Error()
[[Scopes]]: Scopes[0]
message: ''
name: 'SyntaxError'
[[Prototype]]: Object
constructor: ƒ Error()
arguments: ƒ ()
caller: ƒ ()
stackTraceLimit: 10
captureStackTrace: ƒ captureStackTrace()
length: 1
name: 'Error'
prototype: {name: 'Error', message: '', toString: ƒ}
[[Prototype]]: ƒ ()
[[Scopes]]: Scopes[0]
message: ''
name: 'Error'
toString: ƒ toString()
[[Prototype]]: Object
(program) @ d:\Dicoding 3\Project F-E Dicoding\main.js:207
Data berhasil di simpan.
Data berhasil di simpan.
Data berhasil di simpan.


function makeTodo(todoObject) {

    const {id, title, author, year, isCompleted} = todoObject;
  
    const textTitle = document.createElement('h2');
    textTitle.innerText = title;
  
    const textAuthor = document.createElement('p');
    textAuthor.innerText = author;

    const textYear = document.createElement('int');
    textYear.innerText = year;
  
    const textContainer = document.createElement('div');
    textContainer.classList.add('inner');
    textContainer.append(textTitle, textAuthor, textYear);
  
    const container = document.createElement('div');
    container.classList.add('item', 'shadow')
    container.append(textContainer);
    container.setAttribute('id', `saved-${id}`);
  
    if (isCompleted) {
  
      const undoButton = document.createElement('button');
      undoButton.classList.add('undo-button');
      undoButton.addEventListener('click', function () {
        undoTaskFromCompleted(id);
      });
  
      const trashButton = document.createElement('button');
      trashButton.classList.add('trash-button');
      trashButton.addEventListener('click', function () {
        removeTaskFromCompleted(id);
      });
  
      container.append(undoButton, trashButton);
    } else {
  
      const checkButton = document.createElement('button');
      checkButton.classList.add('check-button');
      checkButton.addEventListener('click', function () {
        addTaskToCompleted(id);
      });
  
      container.append(checkButton);
    }
  
    return container;
  }
  
function addTodo() {
  const textTitle = document.getElementById('title').value;
  const textAuthor = document.getElementById('author').value;
  const textYear = document.getElementById('year').value;
  

  const generatedID = generateId();
  const booksave = generateTodoObject(generatedID, textTitle, textAuthor, textYear, false);
  saved.push(booksave);

  document.dispatchEvent(new Event(RENDER_EVENT));
  saveBook();
}

code di dalam function keepBook Baris 175 (sebelum document.dispatchEvent)
const generateId = generatedID();
  const booksave = generateTodoObject(generateId, textTitle, textAuthor, textYear, isComplete, false);
  saved.push(booksave);
function removeTaskFromCompleted(todoId) {
  const booksave = findTodoIndex(todoId)
  if (booksave === -1) return;

  saved.splice(booksave, 1);
  document.dispatchEvent(new Event(RENDER_EVENT))
  saveBook();
}

function addTaskToCompleted(todoId) {
  const booksave = findTodo(todoId);

  if (booksave == null) return;

  booksave.isCompleted = true;
  document.dispatchEvent(new Event(RENDER_EVENT));
  saveBook();
}

function undoTaskFromCompleted(todoId /* HTMLElement */) {

  const booksave = findTodo(todoId);
  if (booksave == null) return;

  booksave.isCompleted = false;
  document.dispatchEvent(new Event(RENDER_EVENT));
  saveBook();
}

document.addEventListener(SAVE, function () {
  console.log(localStorage.getItem(BOOK_KEY));
  console.log("Berhasil Menyimpan Data");
});

document.addEventListener(SAVE, () => {
});

document.addEventListener(RENDER_EVENT, function () {
  const uncompletedTODOList = document.getElementById('incompleteBookshelfList');
  const listCompleted = document.getElementById('completeBookshelfList');

  // clearing list item
  uncompletedTODOList.innerHTML = '';
  listCompleted.innerHTML = '';

})

<<===>>
function e (f) {
  for (const e of f) {
    const f = document.createElement("article");
    f.classList.add("data_book");
    const g = document.createElement("h2");
    g.innerText = h.title;
  const c = document.createElement("button");
  c.innerText = "Belum Selesai dibaca",
  c.classList.add("blue"),
  c.addEventListener("click", b);
  const d = document.createElement("button");
  d.innerText = "Hapus Buku",
  d.classList.add("red"),
  d.addEventListener("click", e);
} else {
  const b = document.createElement("button");
  b.innerText = "Selesai dibaca",
  b.classList.add("blue"),
  b.addEventListener("click", c);
  const a = document.createElement("button");
  a.innerText = "Hapus Buku",
  a.classList.add("red"),
  a.addEventListener("click", e);
}
}
<<===>>
for (const e of f) {
    const f = document.createElement("article");
    f.classList.add("data_book");
    const g = document.createElement("h2");
    g.innerText = h.title;
  e.isCompleted }

<<===>>
function save(unsave) {
  const i = document.querySelector("incompletebookshelf"),
  s = document.querySelector("completebookshelf");
  i.innerHTML = "",
  s.innerHTML = "";
  for (const e of f) {
    const f = document.createElement("article");
    f.classList.add("data_book");
    const g = document.createElement("h2");
    g.innerText = h.title;
    const p = document.createElement("p");
    p.innerText = "Penulis : " + author;
    const y = document.createElement("p");
    if (y.innerText = "Tahun : " + year,
    f.appendChild(g),
    f.appendChild(p),
    f.appendChild(y),
    e.isCompleted); {
      const v = document.createElement("div");
      v.classList.add("action");
  const c = document.createElement("button");
  c.innerText = "Belum Selesai dibaca",
  c.classList.add("blue"),
  c.addEventListener("click", b);
  const d = document.createElement("button");
  d.innerText = "Hapus Buku",
  d.classList.add("red"),
  d.addEventListener("click", e);
  v.appendChild(c),
  v.appendChild(d),
  f.appendChild(v),
  s.appendChild(f)
}  {
  const o = document.createElement("div");
  o.classList.add("action");
  const b = document.createElement("button");
  b.innerText = "Selesai dibaca",
  b.classList.add("blue"),
  b.addEventListener("click", c);
  const a = document.createElement("button");
  a.innerText = "Hapus Buku",
  a.classList.add("red"),
  a.addEventListener("click", e);
  o.appendChild(b),
  o.appendChild(a),
  e.appendChild(f),
  v.appendChild(e)
}}}

SubmitEvent.addEventListener('submit', function (event) {
  const inputTitle = document.getElementById('inputBookTitle').value;
  const inputAuthor = document.getElementById('inputBookAuthor').value;
  const inputYear = document.getElementById('inputBookYear').value;
  const newBook = {
    title: inputTitle,
    author: inputAuthor,
    year: inputYear,
  };
  
  RENDER_EVENT();
})

/** Fungsi yang digunakan untuk menyimpan data buku */ 
function saveBook() {
    if (saveBook()) {
        const data = JSON.stringify(book);
        localStorage.setItem('book', data);
        document.dispatchEvent(new Event(SAVE));
    }
}

<<===>> Baris 32 sebelum function isStorageExist()
function findTodo(todoId) {
      for (const todoItem of saved) {
        if (todoItem.id === todoId) {
          return todoItem;
        }
      }
      return null;
    }
    
    function findTodoIndex(todoId) {
      for (const index in saved) {
        if (saved[index].id === todoId) {
          return index;
        }
      }
      return -1;
    }
<<===>> fungsi untuk menghapus tugas/todo
//** Remove task
function removeTaskFromCompleted(todoId) {
  const booksave = findTodoIndex(todoId)
  if (booksave === -1) return;
  
  saved.splice(booksave, 1);
  document.dispatchEvent(new Event(RENDER_EVENT))
  saveBook();
}

function addTaskToCompleted(todoId) {
  const booksave = findTodo(todoId);

  if (booksave == null) return;

  booksave.isCompleted = true;
  document.dispatchEvent(new Event(RENDER_EVENT));
  saveBook();
}

<div id="incompleteBookshelfList" class="book_list"><article class="book_item"><article>blogger</article><p>Penulis : Bryan</p><p>Tahun : 2016</p><div class="action"><button class="red">Selesai dibaca</button><button class="red">Hapus Buku</button></div></article></div>

<<===>> Search Buku
 const incompleteBookshelfList = document.getElementById('incompleteBookshelfList');
  incompleteBookshelfList.innerHTML = '';

  const completeBookshelfList = document.getElementById('completeBookshelfList');
  completeBookshelfList.innerHTML = '';

  for (const bookItem of bookshelf) {
    if (bookItem.innerText.toLowerCase().includes(searchTitle)) {
      const bookElement = makeBookshelf(bookItem);
      if(bookItem.isComplete) {
        incompleteBookshelfList.append(bookElement);
      } else {
        completeBookshelfList.append(bookElement);
      }
    }
  }

  document.addEventListener(SEARCH, function() {
  const searchTitle = document.getElementById('searchBookTitle');
  const book = document.querySelectorAll('book');
  const filterBook = saved.filter(function(key){
    return
    key.title.toUpperCase().includes(searchTitle.toUpperCase());
  })
  RENDER_EVENT(filterBook);
} 

const filterBook = saved.filter(function(key){
    return
    key.title.toUpperCase().includes(searchTitle.toUpperCase());
  })
  RENDER_EVENT(filterBook);